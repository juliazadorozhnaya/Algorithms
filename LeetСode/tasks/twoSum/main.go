package main

import "fmt"

func twoSum(nums []int, target int) []int {
	m := make(map[int]int)       // Создает хэш-таблицу m, где ключ — это число из массива, а значение — его индекс.
	for idx, val := range nums { // В каждой итерации цикла доступны индекс текущего элемента (idx) и его значение (val).
		/*
			Для каждого элемента проверяет, существует ли в хэш-таблице ключ, равный разности target-val. Это означает,
			что если текущий элемент val и какой-то предыдущий элемент массива в сумме дают target,
			то индекс предыдущего элемента уже будет находиться в m.
		*/
		if i, foundValue := m[target-val]; foundValue {
			/*Если такой ключ найден (foundValue равно true), возвращает массив из двух индексов:
			найденного в таблице (i) и текущего (idx). Это и есть индексы двух чисел, сумма которых равна target.*/

			return []int{i, idx}
		}
		m[val] = idx //Если такой пары не найдено, добавляет текущий элемент и его индекс в хэш-таблицу m для дальнейшей проверки.
	}
	return nil // пара так и не была найдена
}

func main() {
	nums := []int{7, 2, 11, 15}
	var target = 18
	fmt.Println(twoSum(nums, target))
}
